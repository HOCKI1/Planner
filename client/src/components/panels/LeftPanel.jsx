import { useState, useEffect } from "react";
import { IconChevronRight, IconHome } from "@tabler/icons-react";
import { useGlobalMeshStore } from "../data/MeshConsts";

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç LeftPanel ‚Äî –æ—Å–Ω–æ–≤–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
 * –û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–µ–∫—Ü–∏–∏, –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∏–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–æ–º –≤–∏–¥–µ
 */
export default function LeftPanel() {
  // –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ –º–µ—Ç–æ–¥—ã –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ—Ä–∞
  const {
    global_meshes,
    loadGlobalMeshes,
    selectedCategory,
    selectedSubcategory,
    setSelectedCategory,
    setSelectedSubcategory,
    setFourPointKitchen,
    setFivePointKitchen,
    setSixPointKitchen,
    setEightPointKitchen,
  } = useGlobalMeshStore();

  // –õ–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å–µ–∫—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
  const [openSections, setOpenSections] = useState({});
  const [openCategories, setOpenCategories] = useState({});

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
  useEffect(() => {
    loadGlobalMeshes();
  }, [loadGlobalMeshes]);

  // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  const sections = global_meshes?.sections;
  const categories = global_meshes?.categories;

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ —Å–µ–∫—Ü–∏–∏ ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å–∫—Ä—ã—Ç–∏—è —Å–µ–∫—Ü–∏–∏
   * @param {string} sectionId ‚Äî ID –Ω–∞–∂–∞—Ç–æ–π —Å–µ–∫—Ü–∏–∏
   */
  const handleSectionClick = (sectionId) => {
    setOpenSections((prev) => ({
      ...prev,
      [sectionId]: !prev[sectionId],
    }));
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –∞–∫–∫–æ—Ä–¥–µ–æ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ (–æ—Ç–∫—Ä—ã—Ç–∏–µ –æ–¥–Ω–æ–π)
   * @param {string} categoryId ‚Äî ID –Ω–∞–∂–∞—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  const handleCategoryClick = (categoryId) => {
    setOpenCategories((prev) => {
      if (prev[categoryId]) {
        return { ...prev, [categoryId]: false };
      } else {
        return { [categoryId]: true };
      }
    });

    setSelectedCategory(categoryId);
    setSelectedSubcategory(null);
  };

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –≤—ã–±–æ—Ä –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {string} subcategoryId ‚Äî ID –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  const handleSubcategoryClick = (subcategoryId) => {
    if (selectedSubcategory === subcategoryId) {
      setSelectedSubcategory(null);
    } else {
      setSelectedSubcategory(subcategoryId);
    }
  };

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî –ø—ã—Ç–∞–µ—Ç—Å—è –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ –ø–µ—Ä–≤–æ–π –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {object} category ‚Äî –æ–±—ä–µ–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  const getCategoryImage = (category) => {
    const firstSubcategory = category.subcategories?.[0];
    if (firstSubcategory?.img) return firstSubcategory.img;

    const firstItem = firstSubcategory?.items?.[0];
    if (firstItem?.imgPreviewPath) return firstItem.imgPreviewPath;
    if (firstItem?.imgPath) return firstItem.imgPath;

    return null;
  };

  // –í–∞—Ä–∏–∞–Ω—Ç—ã –ø–ª–∞–Ω–∏—Ä–æ–≤–æ–∫ –∫—É—Ö–Ω–∏
  const kitchenLayouts = [
    {
      id: 'four-point',
      name: '4 —É–≥–ª–∞',
      action: setFourPointKitchen,
      image: '/image copy.png'
    },
    {
      id: 'five-point',
      name: '5 —É–≥–ª–æ–≤',
      action: setFivePointKitchen,
      image: '/image copy.png'
    },
    {
      id: 'six-point',
      name: '6 —É–≥–ª–æ–≤',
      action: setSixPointKitchen,
      image: '/image copy.png'
    },
    {
      id: 'eight-point',
      name: '8 —É–≥–ª–æ–≤',
      action: setEightPointKitchen,
      image: '/image copy.png'
    }
  ];

  // –ü–æ–∫–∞ –¥–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º
  if (!sections || !categories) return <></>;

  return (
    <div className="flex flex-col">
      {/* –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏ –∫—É—Ö–Ω–∏ */}
      <div className="mb-6">
        <div className="flex items-center gap-3 mb-4">
          <div className="w-8 h-8 bg-gradient-to-r from-orange-500 to-red-500 rounded-full flex items-center justify-center">
            <IconHome size={16} className="text-white" />
          </div>
          <h3 className="text-lg font-bold text-gray-800">–í—ã–±–æ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤–∫–∏</h3>
        </div>

        {/* –°–µ—Ç–∫–∞ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–æ–∫ */}
        <div className="grid grid-cols-2 gap-3 mb-4">
          {kitchenLayouts.map((layout) => (
            <button
              key={layout.id}
              className="group relative p-4 rounded-xl border-2 transition-all duration-200 hover:scale-105 hover:shadow-lg border-gray-200 bg-white hover:border-orange-300"
              onClick={layout.action}
            >
              <div className="flex flex-col items-center text-center">
                <div className="w-12 h-12 rounded-lg flex items-center justify-center mb-2 transition-colors group-hover:scale-110 transform duration-200 overflow-hidden border border-gray-200">
                  <img
                    src={layout.image}
                    alt={layout.name}
                    className="w-full h-full object-cover"
                    onError={(e) => {
                      e.target.style.display = 'none';
                      e.target.parentElement.style.background = 'linear-gradient(135deg, #ff9100, #ff6d00)';
                    }}
                  />
                </div>
                <div className="text-sm font-semibold text-gray-800 mb-1">
                  {layout.name}
                </div>
                <div className="text-xs text-gray-500 leading-tight">
                  –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≥–ª–æ–≤ –∫–æ–º–Ω–∞—Ç—ã
                </div>
              </div>
            </button>
          ))}
        </div>
      </div>

      {/* –ü–µ—Ä–µ–±–æ—Ä —Å–µ–∫—Ü–∏–π */}
      {sections.map((section) => {
        const sectionCategories = categories.filter((c) =>
          (section.categories || []).includes(c.id)
        );

        return (
          <div key={section.id} className="mb-6">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ */}
            <button
              className="w-full flex items-center justify-between p-4 bg-gray-100 rounded-lg cursor-pointer hover:bg-gray-200 transition-colors"
              onClick={() => (
                handleSectionClick(section.id), setSelectedSubcategory(null)
              )}
            >
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center text-white font-bold">
                  {section.number || "‚Ä¢"}
                </div>
                <span className="font-bold text-gray-700">{section.title}</span>
              </div>
              <IconChevronRight
                size={20}
                className={`transition-transform ${openSections[section.id] ? "rotate-90" : ""}`}
              />
            </button>

            {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ —Å–µ–∫—Ü–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∞) */}
            {openSections[section.id] && (
              <div className="mt-2 pl-4">
                {sectionCategories.map((category) => {
                  const categoryImage = getCategoryImage(category);

                  return (
                    <div key={category.id} className="mb-2">
                      {/* –ö–Ω–æ–ø–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                      <button
                        className={`w-full flex items-center justify-between p-3 rounded-lg cursor-pointer transition-colors ${selectedCategory === category.id
                          ? "bg-orange-100"
                          : "hover:bg-gray-100"
                          }`}
                        onClick={() => handleCategoryClick(category.id)}
                      >
                        <div className="flex items-center gap-3">
                          {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                          {categoryImage ? (
                            <img
                              src={categoryImage}
                              alt={category.title}
                              className="w-8 h-8 object-cover rounded border border-gray-200"
                              onError={(e) => {
                                e.target.style.display = 'none';
                              }}
                            />
                          ) : (
                            <div className="w-8 h-8 bg-gray-200 rounded flex items-center justify-center">
                              <span className="text-xs text-gray-500">üìÅ</span>
                            </div>
                          )}
                          <span className="text-gray-700">{category.title}</span>
                        </div>
                        <IconChevronRight
                          size={18}
                          className={`transition-transform ${openCategories[category.id] ? "rotate-90" : ""}`}
                        />
                      </button>

                      {/* –°–ø–∏—Å–æ–∫ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–π (–µ—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∞—Å–∫—Ä—ã—Ç–∞) */}
                      {openCategories[category.id] && (
                        <div className="pl-4 mt-2 space-y-1">
                          {category.subcategories?.map((subcategory) => (
                            <button
                              key={subcategory.id}
                              onClick={() => handleSubcategoryClick(subcategory.id)}
                              className={`w-full p-2 text-left hover:bg-orange-50 rounded-md transition-colors flex items-center gap-3 ${selectedSubcategory === subcategory.id
                                ? "bg-orange-100"
                                : ""}`}
                            >
                              {/* –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
                              {subcategory.img ? (
                                <img
                                  src={subcategory.img}
                                  alt={subcategory.name}
                                  className="w-6 h-6 object-cover rounded border border-gray-200"
                                  onError={(e) => {
                                    e.target.style.display = 'none';
                                  }}
                                />
                              ) : (
                                <div className="w-6 h-6 bg-gray-200 rounded flex items-center justify-center">
                                  <span className="text-xs text-gray-500">üìÑ</span>
                                </div>
                              )}
                              <span>{subcategory.name}</span>
                            </button>
                          ))}
                        </div>
                      )}
                    </div>
                  );
                })}
              </div>
            )}
          </div>
        );
      })}
    </div>
  );
}
